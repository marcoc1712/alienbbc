#
# AlienBBC Copyright (C) Jules Taplin, Craig Eales, Triode, Neil Sleightholm, Bryan Alton 2004-2009
#
# $Id: RTSP.pm.7_3,v 1.3 2008/10/30 10:10:52 triode Exp $
#
# This plugin is free software; you can redistribute it and/or modify it 
# under the terms of the GNU General Public License, version 2.
#
package Plugins::Alien::RTSP;

use strict;

use base qw(Slim::Player::Pipeline);

use Slim::Utils::Strings qw(string);
use Slim::Utils::Misc;
use Slim::Utils::Log;
use Slim::Utils::Prefs;
use Slim::Player::Song;
use Tie::Cache::LRU;

use XML::Simple;
use URI::Escape;
use Time::Local;
use Date::Parse;
use POSIX qw(strftime);

use constant DELAYCOUNT => 30;

use Slim::Plugin::Favorites::Opml;

use Plugins::Alien::RTSPScanHeaders;

use Data::Dumper;

my $log = logger('plugin.alienbbc');

my $prefs = preferences('plugin.alienbbc');

Slim::Player::ProtocolHandlers->registerHandler('rtsp', __PACKAGE__);

Slim::Formats::Playlists->registerParser('rtsppl', 'Plugins::Alien::Playlists::RTSPPL');
Slim::Formats::Playlists->registerParser('smilpl', 'Plugins::Alien::Playlists::SMIL');


#  Hash holds any URL for playlist (e.g. http://....ram)  or rtsp url and associated image url from iPlayer menu. 
tie my %urlimg, 'Tie::Cache::LRU', 32;

my %menu_urlimg; 

tie my %urldata, 'Tie::Cache::LRU', 32;

sub set_urldata {
	my $url = shift;
	my $itemdata = shift;
	$urldata{$url} = $itemdata;
}

sub get_urldata {
	my $url = shift;
	return (defined($urldata{$url})) ? $urldata{$url} : undef;
}

sub set_urlimg {
	my $url = shift;
	my $img = shift;
#
# BBC use the following images sizes: 86x48 150x84 178x100 512x288 528x297 640x360
# so change requested size to size to suit Squeezeplay - otherwise image is streched
# and fuzzy.
#
	$img =~ s/_86_48.jpg/_512_288.jpg/;
	$img =~ s/_178_100.jpg/_512_288.jpg/;
	$img =~ s/_120_68.jpg/_512_288.jpg/;

	$urlimg{$url} = $img;
}

sub set_menu_urlimg {
	my $url = shift;
	my $img = shift;
	$menu_urlimg{$url} = $img;
}

sub get_urlimg {
	my $url = shift;
	if (defined($urlimg{$url})) {
		return $urlimg{$url};
	} elsif (defined($menu_urlimg{$url})) {
		return $menu_urlimg{$url} ; 
	}
	return undef;
}

sub loadMenuIcon {
	my $class    = shift;
	my $menuUrl  = shift; 
	my $menuOpml = Slim::Plugin::Favorites::Opml->new({ 'url' => $menuUrl });
	parseMenu($menuOpml->{'opml'}->{'body'}[0]->{'outline'});

}

sub parseMenu {
        my $op = shift;

        foreach my $entry (@{$op}) {

                if (exists($entry->{'outline'})) {
                        parseMenu($entry->{'outline'});
                }
                if (defined($entry->{'icon'}) && defined($entry->{'URL'}) && !defined($entry->{'parser'})  ) {
                        $menu_urlimg{$entry->{'URL'}} =  $entry->{'icon'} ;
                }
        }
};


sub isRemote { 1 }

sub new {
	my $class = shift;
	my $args = shift;

	my $url          = $args->{'url'};
	my $client       = $args->{'client'};
	my $transcoder   = $args->{'transcoder'};
	my $song         = $args->{'song'};

	my $playlisturl  = Slim::Player::Playlist::url($client);

	my $seekdata;
	my $rtspmetadata;
	if ($song->can("seekdata")) {
		$seekdata     = $song->seekdata();
		$rtspmetadata = $song->scanData()->{$url};
	} else {
		$seekdata     = $args->{'song'}->{'seekdata'};
		$rtspmetadata = $args->{'song'}->{'scanData'}->{$url};
	}

	my $urldata      = get_urldata($playlisturl);
	if (defined($urldata)) {
		$rtspmetadata->{'webartist'}   = $urldata->{'artist'};
		$rtspmetadata->{'webtitle'}    = $urldata->{'title'};
		$rtspmetadata->{'websubtitle'} = $urldata->{'subtitle'};
	} 

	# Check client - only stream to known slim clients
	if (!defined($client) || !$client->isPlayer()) {

		$log->warn("Alien only streams to Slim players");

		return undef;
	}

	Slim::Music::Info::setContentType($url, 'rtsp');

	$rtspmetadata->{'tracktitle'} = Slim::Music::Info::title($url);

 	my $track    = Slim::Schema->rs('Track')->objectForUrl({
		'url'      => $url,
		'readTags' => 1
	});

	if ($playlisturl =~ m/AlienBBClivestationid/) {
		my ($baseplayurl,$paramstring) = split (/\?/,$playlisturl);
	
		my %ops = map {
				my ( $k, $v ) = split( '=' );
				$k  => (uri_unescape( $v ))
			} split( '&', $paramstring );


		if ( defined($ops{AlienBBClivestationid})) {
			my $id = $ops{AlienBBClivestationid};
			$song->pluginData( alienlivestationid => $id); 
			$song->pluginData( aliencount         => DELAYCOUNT );
			makeNowNextRequest($client,$id);
		} 
	}



# RTSP URL headers are scanned but it usually completes after "new" is called except when a Seek hgas been done
# then the RTSP URL is nOT scanned and so we need to use RTSP metadata  

	if ( $rtspmetadata ) {
		if ( defined ($rtspmetadata->{'endtime'})) {
		  $client->streamingProgressBar( {
				'url'     => $url,
				'bitrate' => $rtspmetadata->{'avgbitrate'} ,
				'duration'=> int($rtspmetadata->{'endtime'}/1000),
		  } );
		};
	}

	if (defined ($seekdata->{timeOffset})) {
		my $newtime = int($seekdata->{timeOffset});

		if ( $url =~ m"\Artsp://(.+)(\.ra\?|\.rm\?)"){
			if ($url =~m/((\?start=)|(\&start=))/ ) {
				$url =~ m/\A(.+)start=[\d:\."]+(.*)\z/;
        	      		$url = $1 . "start=$newtime" . $2;
			} 
			else {
				$url .= "&start=" . $newtime;
			}
		} 
		else {
			$url .= "?start=" . $newtime;
		}

		if ($client->playingSong->can('startOffset')) {
			$client->playingSong->startOffset( $newtime);
		} else {
			$client->playingSong->{startOffset} = $newtime;
		};
		$client->master->remoteStreamStartTime( Time::HiRes::time() - $newtime );
	}

	$log->debug("Modified url to play $url");

	my $quality = preferences('server')->client($client)->get('lameQuality');

	# remove bandwidth param to cope with hosts which fail with the mplayer -bandwidth parameter
	if ($prefs->get('disablebandwidth')) {

		$log->debug("removing mplayer bandwidth parameter");

		$transcoder->{'command'} =~ s/\-bandwidth\s\d+\s//;
	}

	my $command = Slim::Player::TranscodingHelper::tokenizeConvertCommand2(
		$transcoder, $url, $url, 1, $quality
	);

	my $self = $class->SUPER::new(undef, $command);

	${*$self}{'contentType'} = $transcoder->{'streamformat'};

	return $self;
}

sub canHandleTranscode {
	my ($self, $song) = @_;
	
	return 1;
}

sub getStreamBitrate {
	my ($self, $maxRate) = @_;
	
	return Slim::Player::Song::guessBitrateFromFormat(${*$self}{'contentType'}, $maxRate);
}

sub contentType {
	my $class = shift;

	return ${*$class}{'contentType'};
}

sub scanStream {
	my $class = shift;

	Plugins::Alien::RTSPScanHeaders->new(@_);
}

sub getMetadataFor {
	my ( $class, $client, $url, $forceCurrent ) = @_;

	my $icon = get_urlimg($url);
	$icon = Plugins::Alien::Plugin->_pluginDataFor('icon') if (!defined($icon));

	$log->debug("Begin Function for $url $icon");
	
	my $song = $client->currentSongForUrl($url);
	my $track = $song->currentTrack() if $song;
	my $rtspmetadata;
	if ($song) {

		if ( $song->can('scanData')) {
			$rtspmetadata = $song->scanData()->{$track->url} if (defined($song->scanData() ));
		} else {
			$rtspmetadata = $song->{'scanData'}->{$track->url} ;
		}
	}

	if (defined($track)) {
		if ($track->title eq $url && defined ($rtspmetadata->{'title'} )) {
			Slim::Music::Info::setCurrentTitle( $url, $rtspmetadata->{'title'} . "  ". $rtspmetadata->{'author'}  );
			$track->title ($rtspmetadata->{'title'}) ;
			$track->update;
		}
	}

	if (defined($song->pluginData('alienlivestationid')  )) {
		my $id    = $song->pluginData('alienlivestationid');
		my $count = $song->pluginData('aliencount' );
		$count = $count -1;
		if ($count == 0) {
			makeNowNextRequest($client,$id);
		} else {
			$song->pluginData( aliencount => $count );
		}

		return {
			title    =>  $rtspmetadata->{'tracktitle'} . ' - ' . ($song->pluginData( 'alienonnowtext') || ' ') , 
			artist   =>  $song->pluginData( 'alienonnowsynopsis'),
			album	 =>  $song->pluginData( 'alienonnexttext') . " - " . $song->pluginData( 'alienonnextsynopsis'), 
			duration =>  undef,
			bitrate  =>  defined($track) ? $track->prettyBitRate : $rtspmetadata->{'avgbitrate'} ,
			icon   => $icon,
			cover  => $icon,
			type   => 'RTSP',
		};

	}

	return {
		title    =>  $rtspmetadata->{'webtitle'}    || $rtspmetadata->{'title'}      || $rtspmetadata->{'tracktitle'} , 
		artist   =>  $rtspmetadata->{'webartist'}   || $rtspmetadata->{'author'} ,
		album	 =>  $rtspmetadata->{'websubtitle'} || $rtspmetadata->{'tracktitle'}, 

		duration =>  int($rtspmetadata->{'endtime'}/1000),
		bitrate  =>  defined($track) ? $track->prettyBitRate : $rtspmetadata->{'avgbitrate'},
		icon   => $icon,
		cover  => $icon,
		type   => 'RTSP',
	};

}

sub getIcon {
	my ( $class, $url ) = @_;
	$log->info( " Get Icon called url=$url");
	return 'html/images/radio.png';
}

sub canSeek {
	my ( $class, $client, $song ) = @_;
	
# Can only seek if duration is known
	my $seconds = $song->duration();

	if ($seconds) {
	  return 1;
	}
	if ($log->is_debug) {
		$log->debug("Cannot seek duration ($seconds) may be undefined or 0");
	}
	return 0;
}

sub canSeekError {
	my ( $class, $client, $song ) = @_;
	
	my $url = $song->currentTrack()->url;
	
	my ($rtspmetadata, $mimetype);

	if ($song->can('scanData')) {
		if (defined($song->scanData())) {
			if ( $rtspmetadata = $song->scanData()->{$url}) {
				$mimetype = defined( $rtspmetadata->{'mimetype'}) ? $rtspmetadata->{'mimetype'} : "unassigned";	
			}
		} ;
	} else {

		if ($rtspmetadata = $song->{'scanData'}->{$url}) {
			$mimetype = defined( $rtspmetadata->{'mimetype'}) ? $rtspmetadata->{'mimetype'} : "unassigned";	
		}
	} 

	
	if ($log->is_debug) {
		my $ct = Slim::Music::Info::contentType($url);
		$log->debug( "RTSP CanSeekError content type $ct mime type=". $mimetype . " url=$url " );
	}

	if ( $mimetype eq 'audio/x-pn-multirate-realaudio-live' ) {
		return ( 'SEEK_ERROR_LIVE' );
	} 

	if ( !$song->duration() ) {
		return 'SEEK_ERROR_RTSP_UNKNOWN_DURATION';
	}
	
	return 'SEEK_ERROR_RTSP';
}

sub getSeekData {

	my ( $class, $client, $song, $newtime ) = @_;
	
	# Do it all later at open time
	return {timeOffset => $newtime};
}


#
# In the future it may be necessary to distinguish between different format types using rtsp://
# but at the moment only rtsp type used.  Format returned should be the same as suffixes in custom-types.conf
# and used in custom-convert.conf.
#

sub getFormatForURL {
	my $classOrSelf = shift;
	my $url = shift;
	$log->debug("Begin Function for $url");	

	return 'rtsp';
}

# XXX - I think that we scan the track twice, once from the playlist and then again when playing
sub scanUrl {
	my ( $class, $url, $args ) = @_;
	
	Slim::Utils::Scanner::Remote->scanURL($url, $args);
}


sub makeNowNextRequest
{
	my $client = shift;
	my $id = shift;

	my $http = Slim::Networking::SimpleAsyncHTTP->new(
			\&goOnNowOK, \&gotOnNowError,
				{
					timeout  => 5,
					liveclient     => $client,
				} 
			);
	my ($day, $month, $year ) = (localtime)[3..5];
# Need a date in the future  - Add one to month and then another one to change to range 1..12 and use 2nd day.
	$month  = ($month < 11) ? ($month+2): 2;
	$day = 2;
	my $enddate = sprintf('%4d-%02d-%02d',$year+1900, $month, $day);
 
	$http->get("http://www0.rdthdo.bbc.co.uk/cgi-perl/api/query.pl?method=bbc.schedule.getProgrammes&channel_id=,$id&start=&end=$enddate&limit=2&detail=schedule");

}

sub goOnNowOK
{
	my $http    = shift;
	my $client  = $http->params('liveclient');
	my $content = $http->content;

	my $nowtext ;
	my $nexttext;

	my $song   = $client->streamingSong();

	my $schedrec = XMLin( $content , 'forcearray' => [qw(programme)], 'keyattr' => []);
	my $programmes = $schedrec->{'schedule'}->{'programme'};

	$song->pluginData(alienonnowtext => $programmes->[0]->{'title'} );

	if (defined($programmes->[1]->{'start'} ) ) {
		$song->pluginData(alienonnexttext => '@ ' . strftime("%H:%M", localtime(str2time($programmes->[1]->{'start'}))) . ' - '. $programmes->[1]->{'title'} );
	} else {
		$song->pluginData(alienonnexttext => 'Next ' . $programmes->[1]->{'title'} );
	}

	$song->pluginData(alienonnowsynopsis  => defined ($programmes->[0]->{'synopsis'}) ?  $programmes->[0]->{'synopsis'} : ' ' );
	$song->pluginData(alienonnextsynopsis => defined ($programmes->[1]->{'synopsis'}) ?  $programmes->[1]->{'synopsis'} : ' ' );

	$song->pluginData(aliencount => DELAYCOUNT );

	return undef;
}

sub gotOnNowError
{
	my $http    = shift;
	my $client  = $http->params('liveclient');
	my $content = $http->content;

	my $song   = $client->streamingSong();

	$song->pluginData(onnowcount => DELAYCOUNT );

	$log->error("http request for Whats on failed ");
	return undef;
}



1;
